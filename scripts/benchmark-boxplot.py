# SPDX-FileCopyrightText: 2024 Alexandru Fikl <alexfikl@gmail.com>
# SPDX-License-Identifier: MIT

from __future__ import annotations

import json
import logging
import pathlib

from pycaputo.logging import get_logger

script = pathlib.Path(__file__)
logger = get_logger(script.stem)


def main(infile: pathlib.Path, *, outfile: pathlib.Path | None = None) -> int:
    if not infile.exists():
        logger.error("File does not exist: '%s'.", infile)
        return 1

    try:
        with open(infile, encoding="utf-8") as f:
            stats = json.load(f)
    except json.JSONDecodeError:
        logger.error("Failed to read JSON file: '%s'.", infile)
        return 1

    from pycaputo.benchmark import get_basic_machine_info, get_benchmark_results

    machine = get_basic_machine_info(stats)
    results = get_benchmark_results(stats)

    from pycaputo.utils import figure, set_recommended_matplotlib

    set_recommended_matplotlib(
        overrides={
            "figure": {"figsize": (8, 10)},
            "axes": {
                "labelsize": 20,
                "titlesize": 20,
                "grid": True,
                "grid.axis": "y",
                "grid.which": "major",
            },
            "xtick": {"labelsize": 12, "direction": "out"},
            "ytick": {"labelsize": 16, "direction": "out"},
        }
    )

    with figure(outfile) as fig:
        ax = fig.gca()
        ax.bxp(
            [result.asbxp() for result in sorted(results, key=lambda r: r.median)],
            showfliers=False,
            patch_artist=True,
            boxprops={"facecolor": "gray", "alpha": 0.6},
            medianprops={"linewidth": 3, "color": "black"},
        )

        ax.set_xlim([0, len(results) + 1])
        ax.set_ylabel("Time (s)")
        ax.set_xticks(ax.get_xticks(), ax.get_xticklabels(), rotation=25, ha="right")
        ax.set_title(f"{machine.python} - {machine.system}", pad=20)

    return 0


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "infile",
        type=pathlib.Path,
        help="Path to a JSON file generated by pytest-benchmark",
    )
    parser.add_argument(
        "-o",
        "--outfile",
        type=pathlib.Path,
        default=None,
        help="Path to the output file",
    )
    parser.add_argument(
        "-q", "--quiet", action="store_true", help="only show error messages"
    )
    args = parser.parse_args()

    if not args.quiet:
        logger.setLevel(logging.INFO)

    raise SystemExit(main(args.infile, outfile=args.outfile))
